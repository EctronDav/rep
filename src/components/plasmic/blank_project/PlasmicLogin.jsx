// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rJH4LLU3qq3oc7XqEYq3fp
// Component: pPSleSYqv8
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: rJH4LLU3qq3oc7XqEYq3fp/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: pPSleSYqv8/css
import grouppngZ1TxEmivi from "./images/grouppng.png"; // plasmic-import: z1TxEmivi/picture
import facebookImgpngCpzR3SOfv from "./images/facebookImgpng.png"; // plasmic-import: CpzR3sOfv/picture
import googleImgpngEPkWUDsw from "./images/googleImgpng.png"; // plasmic-import: EPk_wUDsw/picture
import linkedinImgpng6MTxk4Nub from "./images/linkedinImgpng.png"; // plasmic-import: 6MTxk4Nub/picture

export const PlasmicLogin__VariantProps = new Array();

export const PlasmicLogin__ArgProps = new Array();

function PlasmicLogin__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"loginCard"}
            data-plasmic-override={overrides.loginCard}
            className={classNames(projectcss.all, sty.loginCard)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"cardLeft"}
              data-plasmic-override={overrides.cardLeft}
              hasGap={true}
              className={classNames(projectcss.all, sty.cardLeft)}
            >
              <div
                data-plasmic-name={"topLogo"}
                data-plasmic-override={overrides.topLogo}
                className={classNames(projectcss.all, sty.topLogo)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__xifom)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: grouppngZ1TxEmivi,
                    fullWidth: 220,
                    fullHeight: 61,
                    aspectRatio: undefined
                  }}
                />
              </div>

              <div
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                className={classNames(projectcss.all, sty.form)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"bemVindos"}
                  data-plasmic-override={overrides.bemVindos}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.bemVindos)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4FQvO
                    )}
                  >
                    {"Sign in to "}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pdOa3
                    )}
                  >
                    {"Reprezent"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qQwRy
                    )}
                  >
                    {"Me"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"socials"}
                  data-plasmic-override={overrides.socials}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.socials)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__yGgbJ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: facebookImgpngCpzR3SOfv,
                      fullWidth: 49,
                      fullHeight: 49,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__rFv7)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: googleImgpngEPkWUDsw,
                      fullWidth: 49,
                      fullHeight: 49,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__dAoiZ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: linkedinImgpng6MTxk4Nub,
                      fullWidth: 49,
                      fullHeight: 49,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"cardRight"}
              data-plasmic-override={overrides.cardRight}
              hasGap={true}
              className={classNames(projectcss.all, sty.cardRight)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ycJF
                )}
              >
                {"Hello, Friends"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Rguh
                )}
              >
                {"Enter your personal details\nand strat journy with us."}
              </div>

              <button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button
                )}
              >
                {"SIGN UP"}
              </button>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "loginCard",
    "cardLeft",
    "topLogo",
    "form",
    "bemVindos",
    "socials",
    "cardRight",
    "button"
  ],

  loginCard: [
    "loginCard",
    "cardLeft",
    "topLogo",
    "form",
    "bemVindos",
    "socials",
    "cardRight",
    "button"
  ],

  cardLeft: ["cardLeft", "topLogo", "form", "bemVindos", "socials"],
  topLogo: ["topLogo"],
  form: ["form", "bemVindos", "socials"],
  bemVindos: ["bemVindos"],
  socials: ["socials"],
  cardRight: ["cardRight", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loginCard: makeNodeComponent("loginCard"),
    cardLeft: makeNodeComponent("cardLeft"),
    topLogo: makeNodeComponent("topLogo"),
    form: makeNodeComponent("form"),
    bemVindos: makeNodeComponent("bemVindos"),
    socials: makeNodeComponent("socials"),
    cardRight: makeNodeComponent("cardRight"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
